import streamlit as st
from PyPDF2 import PdfReader
import json

import google.generativeai as genai


def get_pdf_text(pdf):
    text = ""
    pdf_reader = PdfReader(pdf)
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text


API_KEY = "MY_API_KEY"

genai.configure(api_key=API_KEY)

model = genai.GenerativeModel('gemini-pro')

prompt_template = """
–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –î–æ–ª–∂–Ω–æ—Å—Ç—å (Position): %s
- –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (Position description): %s
- –†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (Applicant resume): %s

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ JSON-—Ñ–æ—Ä–º–∞—Ç–∞:

{
  "Applicant_name": "–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–∑ —Ä–µ–∑—é–º–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
  "Short_Description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –≤–∫–ª—é—á–∞—è –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
  "Advice_from_AI": "–°–æ–≤–µ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–¥–µ–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
  "Applicant_score": "–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 100, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
}

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∏–∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–Ω–µ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.

"""


st.set_page_config(
        page_title="Gemini PDF Chatbot",
        page_icon="ü§ñ"
    )


st.title('AI CV analyzer')

# with st.sidebar:
#     pdf_doc = st.file_uploader(
#         label="Upload your PDF Files and Click on the Submit & Process Button", accept_multiple_files=False
#     )
#     if st.button("Submit & Process"):
#         with st.spinner("Processing..."):
#             raw_text = get_pdf_text(pdf_doc)
#             st.success("Done")

txt = st.text_area(label="You can paste resume text here")
pdf_doc = st.file_uploader(
    label="or upload pdf here", accept_multiple_files=False
)

position = "analyst"
description = "analyst jobs"

analyze_button = st.button("Analyze", type="primary")

if analyze_button and pdf_doc:
    response = model.generate_content(prompt_template % (position, description, get_pdf_text(pdf_doc)))
    json_resp = json.loads(response.text)
    st.write(f"Applicant name: {json_resp['Applicant_name']}")
    st.write(f"Short description {json_resp['Short_Description']}")
    st.write(f"Advice from AI: {json_resp['Advice_from_AI']}")
    st.write(f"Applicant score: {json_resp['Applicant_score']} / 100")

    st.write("–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ")
    st.write(json_resp)
else:
    st.write("–ù–µ—Ç —Ñ–∞–π–ª–∞")
